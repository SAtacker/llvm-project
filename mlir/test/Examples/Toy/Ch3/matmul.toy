# RUN: toyc-ch3 %s -emit=mlir 2>&1 | FileCheck %s

# User-defined generic function that performs matrix multiplication
def multiply_matrices(a, b) {
  return a*b;
}

def main() {
  var a<2, 3> = [[1, 2, 3], [4, 5, 6]];
  var b<3, 2> = [[7, 8], [9, 10], [11, 12]];
  var e<2, 2> = [[1,1],[1,1]];
  
  # Perform matrix multiplication and print the result
  var c = multiply_matrices(a, b);
  var d = multiply_matrices(e, c);
  var k = multiply_matrices(multiply_matrices(a,b),c);
  print(k);
}

# CHECK-LABEL: toy.func @multiply_matrices(
# CHECK-SAME:                               [[VAL_0:%.*]]: tensor<2x3xf64>, [[VAL_1:%.*]]: tensor<3x2xf64>) -> tensor<2x2xf64>
# CHECK:         [[VAL_2:%.*]] = toy_matmul.matmul [[VAL_0]], [[VAL_1]] : tensor<2x3xf64>
# CHECK-NEXT:    toy.return [[VAL_2]] : tensor<2x2xf64>

# CHECK-LABEL: toy.func @main()
# CHECK-NEXT:    [[VAL_3:%.*]] = toy.constant dense<{{\[\[}}1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>
# CHECK-NEXT:    [[VAL_4:%.*]] = toy.constant dense<{{\[\[}}7.000000e+00, 8.000000e+00], [9.000000e+00, 1.000000e+01], [1.100000e+01, 1.200000e+01]]> : tensor<3x2xf64>
# CHECK-NEXT:    [[VAL_5:%.*]] = toy.generic_call @multiply_matrices([[VAL_3]], [[VAL_4]]) : (tensor<2x3xf64>, tensor<3x2xf64>) -> tensor<2x2xf64>
# CHECK-NEXT:    toy.print [[VAL_5]] : tensor<2x2xf64>
# CHECK-NEXT:    toy.return